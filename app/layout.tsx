'use client';

import { usePathname } from 'next/navigation';
import localFont from "next/font/local";
import "./globals.css";
import NavBar from './NavBar';
import { CooperativaProvider } from './Context/cooperativaContext'
import { SociosProvider } from './Context/sociosContext'; 
import { SocioProvider } from './Context/socioContext'; // Ajusta la ruta según tu contexto
import { MovimientoProvider } from './Context/movContext';
import { RepresentanteProvider } from './Context/representanteContext';
import { RepresentantesProvider } from './Context/representantesContext';
import { PrestamoProvider } from './Context/prestamoContext';
import { PrestamosProvider } from './Context/prestamosContext';
import { MovimientosProvider } from './Context/movimientoContext';
import { PrestamosExtendidosProvider } from './Context/tranprestamosContext';
import ProvidersWrapper from './Context/ProviderWrapper';
// import Link from "next/link";
import { IoMdArrowRoundBack } from "react-icons/io";
import Head from "next/head";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export function useCurrentPath() {
  const pathName = usePathname();
  return pathName;
}

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

const providers = [
  CooperativaProvider,
  RepresentantesProvider, 
  RepresentanteProvider, 
  SociosProvider, 
  SocioProvider, 
  MovimientoProvider, 
  MovimientosProvider, 
  PrestamosProvider, 
  PrestamoProvider, 
  PrestamosExtendidosProvider
];

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const pathname = useCurrentPath(); // Using the custom hook to get the current pathname
  const isHomePage = pathname === '/';
  const isLoginPage = pathname === '/loginPage';
  const isLandingPage = pathname === '/Dashboard';
  return (
    <html lang="es">
      <head />
      <body className={`${isLoginPage ? "bg-gray-100" : "bg-white"} ${geistSans.variable} ${geistMono.variable} antialiased`}>
        <ProvidersWrapper providers={providers}>
          <NavBar />
          <Head>
            <title>{"Coopesoft"}</title>
            <meta name="description" content={"Coopesoft"} />
          </Head>
          <main>
            {!isHomePage && !isLandingPage && ( // Solo renderiza el botón si no estamos en la página principal
              <button
                onClick={() => window.history.back()}
                className="text-[#00755D] hover:text-[#e6be31] pl-6"
              >
                <IoMdArrowRoundBack className="inline-block" size={25} />
              </button>
            )}
            {children}
          </main>
        </ProvidersWrapper>
      </body>
    </html>
  );
}

